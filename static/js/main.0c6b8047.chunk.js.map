{"version":3,"sources":["Task.js","App.js","serviceWorker.js","redux/reducer.js","redux/store.js","index.js"],"names":["connect","state","todos","dispatch","deleteTodo","id","type","payload","editTodo","editValue","editDone","editPosition","flag","editButtonToSave","props","useState","inputValue","setInput","index","findIndex","el","editBut","editButton","filter","object","done","title","onClick","value","onChange","e","target","addTodo","todo","className","map","key","Boolean","window","location","hostname","match","initialState","uuidv4","action","indexEdit","console","log","newArr","indexDoneUndone","indexToMove","splice","removed","length","store","createStore","composeWithDevTools","applyMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0c6b8047.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport {connect} from \"react-redux\";\n\n\nfunction Task(props) {\n    const [inputValue, setInput] = useState('')\n    const index = props.todos.findIndex(el=>el.id===props.id)\n    const editBut = props.todos[index].editButton\n    const editTitle = () => {\n        props.editTodo(props.id, inputValue)\n        setInput('')\n        props.editButtonToSave(props.id)\n    }\n    const [object] = props.todos.filter(el => el.id === props.id)\n    return (\n        <span>\n            {object.done ? \"✅\" : \"\"}\n            {props.title}\n            {editBut ? <button onClick={() => props.editButtonToSave(props.id)}>Edit</button> :\n                <button onClick={editTitle}>Save</button>}\n            {editBut ? \"\" : <input value={inputValue} onChange={(e) => setInput(e.target.value)}/>}\n            <button onClick={() => props.deleteTodo(props.id)}>Delete</button>\n            <button onClick={() => props.editDone(props.id)}>Done</button>\n            <button onClick={() => props.editPosition(props.id, true)}>↑</button>\n            <button onClick={() => props.editPosition(props.id, false)}>↓</button>\n\n\n        </span>\n    );\n}\n\n\nconst mapStateToProps = (state) => ({\n    todos: state.todos,\n\n});\nconst mapDispatchToProps = (dispatch) => ({\n    deleteTodo: (id) => dispatch({type: 'DELETE_TODO', payload: id}),\n    editTodo: (id, editValue) => dispatch({type: 'EDIT_TODO', payload: {id: id, editValue: editValue}}),\n    editDone: (id) => dispatch({type: 'EDIT_DONE', payload: id}),\n    editPosition: (id, flag) => dispatch({type: 'EDIT_POSITION', payload: {id: id, flag: flag}}),\n    editButtonToSave: (id) => dispatch({type: 'CHANGE_EDIT_BUTTON', payload: id})\n});\nexport default connect(mapStateToProps, mapDispatchToProps)(Task);\n","import React, {useState} from 'react';\nimport Task from \"./Task\"\nimport './App.css';\nimport {connect} from 'react-redux';\n\n\nfunction App(props) {\n    const [inputValue, setInput] = useState('')\n    const addTodo = () => {\n        props.addTodo(inputValue)\n        setInput('')\n    }\n    return (\n        <div className=\"App\">\n            <input value={inputValue} onChange={(e) => setInput(e.target.value)}/>\n            <button onClick={addTodo}>Create todo</button>\n\n            {props.todos.map((el, index) =>\n                <li key={index}>\n                    <Task key={el.id} title={el.title} id={el.id}/>\n                </li>\n            )}\n\n        </div>\n    );\n}\n\nconst mapStateToProps = (state) => ({\n    todos: state.todos\n});\nconst mapDispatchToProps = (dispatch) => ({\n    addTodo: (todo) => dispatch({type: 'TODO_ADD', payload: todo})\n\n});\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {v4 as uuidv4} from \"uuid\";\n\nconst initialState = {\n    todos: [\n        {\n            id: uuidv4(),\n            title: \"first-todo\",\n            done: false,\n            editButton: true\n        },\n        {\n            id: uuidv4(),\n            title: \"second-todo\",\n            done: false,\n            editButton: true\n        }\n\n    ]\n};\nconst todo = (state = initialState, action) => {\n    switch (action.type) {\n        case 'CHANGE_EDIT_BUTTON':\n            const indexEdit = state.todos.findIndex(el => el.id === action.payload)\n            console.log(indexEdit)\n            state.todos[indexEdit].editButton = !state.todos[indexEdit].editButton\n            return {\n                ...state,\n                todos: [...state.todos]\n            }\n        case 'TODO_ADD':\n            return {\n                ...state,\n                todos: [...state.todos, {id: uuidv4(), title: action.payload,editButton: true}],\n\n            }\n        case 'DELETE_TODO':\n            const newArr = state.todos.filter((el) => el.id !== action.payload)\n            return {\n                ...state,\n                todos: newArr,\n\n            }\n        case 'EDIT_TODO':\n            const index = state.todos.findIndex(el => el.id === action.payload.id)\n            state.todos[index].title = action.payload.editValue\n            return {\n                ...state,\n                todos: [...state.todos],\n\n            }\n        case 'EDIT_DONE':\n            const indexDoneUndone = state.todos.findIndex(el => el.id === action.payload)\n            state.todos[indexDoneUndone].done = !state.todos[indexDoneUndone].done\n            return {\n                ...state,\n                todos: [...state.todos],\n\n            }\n        case 'EDIT_POSITION':\n            const indexToMove = state.todos.findIndex(el => el.id === action.payload.id)\n            console.log(\"Index\", indexToMove)\n            if (action.payload.flag) {\n                if (indexToMove !== 0) {\n\n                    const [removed] = state.todos.splice(indexToMove, 1)\n                    state.todos.splice(indexToMove - 1, 0, removed)\n                }\n            } else {\n                if (indexToMove !== state.todos.length - 1) {\n                    const [removed] = state.todos.splice(indexToMove, 1)\n                    state.todos.splice(indexToMove + 1, 0, removed)\n                }\n            }\n            return {\n                ...state,\n                todos: [...state.todos],\n\n            }\n\n        default:\n            return state\n\n    }\n\n}\nexport default todo","import {createStore,applyMiddleware} from 'redux';\nimport {composeWithDevTools} from 'redux-devtools-extension'\nimport todo from \"./reducer\";\n\nconst store = createStore(\n    todo, composeWithDevTools(applyMiddleware()));\nconsole.log(\"My todo store\",todo)\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {Provider} from 'react-redux';\n\nimport * as serviceWorker from './serviceWorker';\nimport store from \"./redux/store\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}